# assembly generated by minc compiler ...
	.globl	sum2
    .type	sum2, @function
sum2:
    .cfi_startproc
    pushq	%rbp
    movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	subq	$16, %rsp
	pushq	$0
	popq	%rax
	movq	%rax, -16(%rbp)
	pushq	$0
	popq	%rax
	movq	%rax, -24(%rbp)
	jmp	WHILE_COND_0
WHILE_BODY_0:
	subq	$0, %rsp
	movq	-24(%rbp), %rax
	pushq	%rax
	movq	-16(%rbp), %rax
	pushq	%rax
	popq	%rax
	popq	%rcx
	addq	%rax, %rcx
	pushq	%rcx
	popq	%rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	pushq	%rax
	pushq	$1
	popq	%rax
	popq	%rcx
	addq	%rax, %rcx
	pushq	%rcx
	popq	%rax
	movq	%rax, -16(%rbp)
WHILE_COND_0:
	movq	-16(%rbp), %rax
	pushq	%rax
	movq	-8(%rbp), %rax
	pushq	%rax
	movq	-8(%rbp), %rax
	pushq	%rax
	popq	%rax
	popq	%rcx
	imulq	%rcx
	pushq	%rax
	popq	%rax
	popq	%rcx
	cmpq	%rax, %rcx
	movq	$0, %rax
	setl	%al
	pushq	%rax
	popq	%rax
	cmpq	$0, %rax
	jne	WHILE_BODY_0
WHILE_END_0:
	movq	-24(%rbp), %rax
	pushq	%rax
	popq	%rax
	leave
	ret
	.cfi_endproc
	.globl	f
    .type	f, @function
f:
    .cfi_startproc
    pushq	%rbp
    movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	subq	$0, %rsp
	movq	-8(%rbp), %rax
	pushq	%rax
	pushq	$10000
	movq	$0, %rdx
	popq	%rcx
	popq	%rax
	idivq	%rcx
	pushq	%rdx
	popq	%rdi
	call	sum2
	pushq	%rax
	popq	%rax
	leave
	ret
	.cfi_endproc
