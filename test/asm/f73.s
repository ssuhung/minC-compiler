# assembly generated by minc compiler ...
	.globl	fact
    .type	fact, @function
fact:
    .cfi_startproc
    pushq	%rbp
    movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	subq	$0, %rsp
	movq	-8(%rbp), %rax
	pushq	%rax
	pushq	$0
	popq	%rax
	popq	%rcx
	cmpq	%rax, %rcx
	movq	$0, %rax
	setle	%al
	pushq	%rax
	popq	%rax
	cmp	$0, %rax
	je	ELSE_0
	subq	$0, %rsp
	pushq	$1
	popq	%rax
	leave
	ret
	jmp	IF_END_0
ELSE_0:
	subq	$8, %rsp
	movq	-8(%rbp), %rax
	pushq	%rax
	pushq	$1
	popq	%rax
	popq	%rcx
	subq	%rax, %rcx
	pushq	%rcx
	popq	%rdi
	call	fact
	pushq	%rax
	popq	%rax
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	pushq	%rax
	movq	-16(%rbp), %rax
	pushq	%rax
	popq	%rax
	popq	%rcx
	imulq	%rcx
	pushq	%rax
	popq	%rax
	leave
	ret
IF_END_0:
	.cfi_endproc
	.globl	f
    .type	f, @function
f:
    .cfi_startproc
    pushq	%rbp
    movq	%rsp, %rbp
	movq	%rdi, -8(%rbp)
	subq	$8, %rsp
	subq	$8, %rsp
	pushq	$10
	movq	-8(%rbp), %rax
	pushq	%rax
	pushq	$990
	movq	$0, %rdx
	popq	%rcx
	popq	%rax
	idivq	%rcx
	pushq	%rdx
	popq	%rax
	popq	%rcx
	addq	%rax, %rcx
	pushq	%rcx
	popq	%rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	pushq	%rax
	popq	%rdi
	call	fact
	pushq	%rax
	popq	%rax
	leave
	ret
	.cfi_endproc
